import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import Draggable from "react-draggable";


class Ship extends React.Component {
    // constructor(props) {
    //     super(props);
    // }

    handleDrag = (e, ui) => {
        const {x, y} = this.props.shiData.deltaPosition;
        this.props.shiData.deltaPosition = {
            x: x + ui.deltaX,
            y: y + ui.deltaY,
        }
    };


    render() {
        let width;
        let height;
        if (this.props.shiData.isVertical) {
            width = 60;
            height = 60 * this.props.shiData.size;
        } else {
            width = 60 * this.props.shiData.size;
            height = 60;
        }


        const shipStyle = {
            height: `${height}px`,
            width: `${width}px`
        };

        console.log(this.props.shiData)
        return (

            <Draggable grid={[60, 60]} onDrag={this.handleDrag} bounds='body' onStart={() => this.props.shiData.drag}>
                {/*<Draggable grid={[60, 60]} bounds="parent">*/}
                <div style={shipStyle} className="ship">
                    <button onClick={() => {
                        this.props.shiData.isVertical = !this.props.shiData.isVertical
                    }
                    }>R
                    </button>
                    <div>x: {this.props.shiData.deltaPosition.x.toFixed(0)},
                        y: {this.props.shiData.deltaPosition.y.toFixed(0)}</div>
                    {/*<img src='placeholderShip.png' alt='Ship Image'/>*/}
                </div>
            </Draggable>

        )
    }
}


class App extends React.Component {
    // constructor(props) {
    //     super(props);
    // }


    // onControlledDrag = (e, position) => {
    //     const {x, y} = position;
    //     this.setState({controlledPosition: {x, y}});
    // };
    //
    // onControlledDragStop = (e, position) => {
    //     this.onControlledDrag(e, position);
    //     this.onStop();
    // };


    render() {

        const carrier = {
            deltaPosition: {
                x: 0, y: 0
            },
            size: 4,
            drag: true,
            isVertical: false
        }
        const battleship1 = {
            deltaPosition: {
                x: 0, y: 0
            },
            size: 3,
            drag: true,
            isVertical: false
        }
        const battleship2 = {
            deltaPosition: {
                x: 0, y: 0
            },
            size: 3,
            drag: true,
            isVertical: false
        }
        const battleship3 = {
            deltaPosition: {
                x: 0, y: 0
            },
            size: 3,
            drag: true,
            isVertical: false
        }
        const destroyer1 = {
            deltaPosition: {
                x: 0, y: 0
            },
            size: 2,
            drag: true,
            isVertical: false
        }

        const destroyer2 = {
            deltaPosition: {
                x: 0, y: 0
            },
            size: 2,
            drag: true,
            isVertical: false
        }

        const destroyer3 = {
            deltaPosition: {
                x: 0, y: 0
            },
            size: 2,
            drag: true,
            isVertical: false
        }
        const frigate1 = {
            deltaPosition: {
                x: 0, y: 0
            },
            size: 1,
            drag: true,
            isVertical: false
        }
        const frigate2 = {
            deltaPosition: {
                x: 0, y: 0
            },
            size: 1,
            drag: true,
            isVertical: false
        }

        return (
            <div>
                <h1>Batalla Naval</h1>
                {carrier.deltaPosition.x}
                <div className='board1Container'>
                    <Ship shiData={carrier}></Ship>
                    <Ship shiData={battleship1}></Ship>
                    <Ship shiData={battleship2}></Ship>
                    <Ship shiData={battleship3}></Ship>
                    <Ship shiData={destroyer1}></Ship>
                    <Ship shiData={destroyer2}></Ship>
                    <Ship shiData={destroyer3}></Ship>
                    <Ship shiData={frigate1}></Ship>
                    <Ship shiData={frigate2}></Ship>
                    <div className="grid-container">
                        <div className="grid-item">1</div>
                        <div className="grid-item">2</div>
                        <div className="grid-item">3</div>
                        <div className="grid-item">4</div>
                        <div className="grid-item">5</div>
                        <div className="grid-item">6</div>
                        <div className="grid-item">7</div>
                        <div className="grid-item">8</div>
                        <div className="grid-item">9</div>
                        <div className="grid-item">10</div>
                        <div className="grid-item">1</div>
                        <div className="grid-item">2</div>
                        <div className="grid-item">3</div>
                        <div className="grid-item">4</div>
                        <div className="grid-item">5</div>
                        <div className="grid-item">6</div>
                        <div className="grid-item">7</div>
                        <div className="grid-item">8</div>
                        <div className="grid-item">9</div>
                        <div className="grid-item">10</div>
                        <div className="grid-item">1</div>
                        <div className="grid-item">2</div>
                        <div className="grid-item">3</div>
                        <div className="grid-item">4</div>
                        <div className="grid-item">5</div>
                        <div className="grid-item">6</div>
                        <div className="grid-item">7</div>
                        <div className="grid-item">8</div>
                        <div className="grid-item">9</div>
                        <div className="grid-item">10</div>
                        <div className="grid-item">1</div>
                        <div className="grid-item">2</div>
                        <div className="grid-item">3</div>
                        <div className="grid-item">4</div>
                        <div className="grid-item">5</div>
                        <div className="grid-item">6</div>
                        <div className="grid-item">7</div>
                        <div className="grid-item">8</div>
                        <div className="grid-item">9</div>
                        <div className="grid-item">10</div>
                        <div className="grid-item">1</div>
                        <div className="grid-item">2</div>
                        <div className="grid-item">3</div>
                        <div className="grid-item">4</div>
                        <div className="grid-item">5</div>
                        <div className="grid-item">6</div>
                        <div className="grid-item">7</div>
                        <div className="grid-item">8</div>
                        <div className="grid-item">9</div>
                        <div className="grid-item">10</div>
                        <div className="grid-item">1</div>
                        <div className="grid-item">2</div>
                        <div className="grid-item">3</div>
                        <div className="grid-item">4</div>
                        <div className="grid-item">5</div>
                        <div className="grid-item">6</div>
                        <div className="grid-item">7</div>
                        <div className="grid-item">8</div>
                        <div className="grid-item">9</div>
                        <div className="grid-item">10</div>
                        <div className="grid-item">1</div>
                        <div className="grid-item">2</div>
                        <div className="grid-item">3</div>
                        <div className="grid-item">4</div>
                        <div className="grid-item">5</div>
                        <div className="grid-item">6</div>
                        <div className="grid-item">7</div>
                        <div className="grid-item">8</div>
                        <div className="grid-item">9</div>
                        <div className="grid-item">10</div>
                        <div className="grid-item">1</div>
                        <div className="grid-item">2</div>
                        <div className="grid-item">3</div>
                        <div className="grid-item">4</div>
                        <div className="grid-item">5</div>
                        <div className="grid-item">6</div>
                        <div className="grid-item">7</div>
                        <div className="grid-item">8</div>
                        <div className="grid-item">9</div>
                        <div className="grid-item">10</div>
                        <div className="grid-item">1</div>
                        <div className="grid-item">2</div>
                        <div className="grid-item">3</div>
                        <div className="grid-item">4</div>
                        <div className="grid-item">5</div>
                        <div className="grid-item">6</div>
                        <div className="grid-item">7</div>
                        <div className="grid-item">8</div>
                        <div className="grid-item">9</div>
                        <div className="grid-item">10</div>
                        <div className="grid-item">1</div>
                        <div className="grid-item">2</div>
                        <div className="grid-item">3</div>
                        <div className="grid-item">4</div>
                        <div className="grid-item">5</div>
                        <div className="grid-item">6</div>
                        <div className="grid-item">7</div>
                        <div className="grid-item">8</div>
                        <div className="grid-item">9</div>
                        <div className="grid-item">10</div>
                    </div>


                </div>


                {/*<Draggable onStart={() => false}>*/}
                {/*    <div className="box">I don't want to be dragged</div>*/}
                {/*</Draggable>*/}
                {/*<Draggable onDrag={this.handleDrag} {...dragHandlers}>*/}
                {/*    <div className="box">*/}
                {/*        <div>I track my deltas</div>*/}
                {/*        <div>x: {deltaPosition.x.toFixed(0)}, y: {deltaPosition.y.toFixed(0)}</div>*/}
                {/*    </div>*/}
                {/*</Draggable>*/}


                {/*<Draggable grid={[25, 25]} {...dragHandlers}>*/}
                {/*    <div className="box">I snap to a 25 x 25 grid</div>*/}
                {/*</Draggable>*/}
                {/*<Draggable grid={[50, 50]} {...dragHandlers}>*/}
                {/*    <div className="box">I snap to a 50 x 50 grid</div>*/}
                {/*</Draggable>*/}

                {/*<Draggable {...dragHandlers}>*/}
                {/*    <div className="box drop-target" onMouseEnter={this.onDropAreaMouseEnter}*/}
                {/*         onMouseLeave={this.onDropAreaMouseLeave}>I can detect drops from the next box.*/}
                {/*    </div>*/}
                {/*</Draggable>*/}
                {/*<Draggable {...dragHandlers} onStop={this.onDrop}>*/}
                {/*    <div className={`box ${this.state.activeDrags ? "no-pointer-events" : ""}`}>I can be dropped onto*/}
                {/*        another box.*/}
                {/*    </div>*/}
                {/*</Draggable>*/}

                {/*<Draggable bounds="body" {...dragHandlers}>*/}
                {/*    <div className="box">*/}
                {/*        I can only be moved within the confines of the body element.*/}
                {/*    </div>*/}
                {/*</Draggable>*/}

                {/*<Draggable position={controlledPosition} {...dragHandlers} onDrag={this.onControlledDrag}>*/}
                {/*    <div className="box">*/}
                {/*        My position can be changed programmatically. <br/>*/}
                {/*        I have a drag handler to sync state.*/}
                {/*        <div>*/}
                {/*            <a href="#" onClick={this.adjustXPos}>Adjust x ({controlledPosition.x})</a>*/}
                {/*        </div>*/}
                {/*        <div>*/}
                {/*            <a href="#" onClick={this.adjustYPos}>Adjust y ({controlledPosition.y})</a>*/}
                {/*        </div>*/}
                {/*    </div>*/}
                {/*</Draggable>*/}
                {/*<Draggable position={controlledPosition} {...dragHandlers} onStop={this.onControlledDragStop}>*/}
                {/*    <div className="box">*/}
                {/*        My position can be changed programmatically. <br/>*/}
                {/*        I have a dragStop handler to sync state.*/}
                {/*        <div>*/}
                {/*            <a href="#" onClick={this.adjustXPos}>Adjust x ({controlledPosition.x})</a>*/}
                {/*        </div>*/}
                {/*        <div>*/}
                {/*            <a href="#" onClick={this.adjustYPos}>Adjust y ({controlledPosition.y})</a>*/}
                {/*        </div>*/}
                {/*    </div>*/}
                {/*</Draggable>*/}

            </div>
        );
    }
}

//
// class RemWrapper extends React.Component {
//     // PropTypes is not available in this environment, but here they are.
//     // static propTypes = {
//     //   style: PropTypes.shape({
//     //     transform: PropTypes.string.isRequired
//     //   }),
//     //   children: PropTypes.node.isRequired,
//     //   remBaseline: PropTypes.number,
//     // }
//
//     translateTransformToRem(transform, remBaseline = 16) {
//         const convertedValues = transform.replace('translate(', '').replace(')', '')
//             .split(',')
//             .map(px => px.replace('px', ''))
//             .map(px => parseInt(px, 10) / remBaseline)
//             .map(x => `${x}rem`)
//         const [x, y] = convertedValues
//
//         return `translate(${x}, ${y})`
//     }
//
//     render() {
//         const {children, remBaseline = 16, style} = this.props
//         const child = React.Children.only(children)
//
//         const editedStyle = {
//             ...child.props.style,
//             ...style,
//             transform: this.translateTransformToRem(style.transform, remBaseline),
//         }
//
//         return React.cloneElement(child, {
//             ...child.props,
//             ...this.props,
//             style: editedStyle
//         })
//     }
// }
//

// ========================================

ReactDOM.render(
    <App/>,
    document.getElementById('root')
);
