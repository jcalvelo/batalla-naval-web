{"version":3,"sources":["index.js"],"names":["Ship","width","height","this","props","shipData","isVertical","size","shipStyle","grid","onDrag","bounds","onStart","dragEnabled","style","className","id","onClick","rotate","deltaPosition","x","toFixed","y","React","Component","App","state","ships","Array","fill","e","ui","shipId","node","auxShipArray","auxShip","deltaX","deltaY","setState","i","ship","rotateShip","handleDrag","tableroShips","shipPositionIsValid","length","row","col","inRange","j","some","posCount","shipMarkup","push","renderShip","shipBoardMarkup","display","columnCount","columnGap","confirmarPosicionBarcos","number","min","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f194d80a.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Draggable from \"react-draggable\";\r\n\r\n//reglas https://www.hasbro.com/common/instruct/Battleship.PDF\r\n\r\nclass Ship extends React.Component {\r\n\r\n    render() {\r\n        let width;\r\n        let height;\r\n        if (this.props.shipData.isVertical) {\r\n            width = 60;\r\n            height = 60 * this.props.shipData.size;\r\n        } else {\r\n            width = 60 * this.props.shipData.size;\r\n            height = 60;\r\n        }\r\n\r\n\r\n        const shipStyle = {\r\n            height: `${height}px`,\r\n            width: `${width}px`\r\n        };\r\n        return (\r\n\r\n            <Draggable grid={[60, 60]} onDrag={this.props.onDrag}\r\n                       bounds='body' onStart={() => this.props.dragEnabled}>\r\n                <div style={shipStyle} className=\"ship\" id={this.props.id}>\r\n                    <button onClick={() => {\r\n                        this.props.rotate(this.props.id)\r\n                    }}>R\r\n                    </button>\r\n                    <div>x: {this.props.shipData.deltaPosition.x.toFixed(0)},\r\n                        y: {this.props.shipData.deltaPosition.y.toFixed(0)}</div>\r\n                    {/*<img src='placeholderShip.png' alt='Ship Image'/>*/}\r\n                </div>\r\n            </Draggable>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ships: Array(5).fill(null),\r\n            dragEnabled: true\r\n        }\r\n\r\n        this.state.ships[0] = {\r\n            id: 'carrier',\r\n            deltaPosition: {\r\n                x: 0, y: 0\r\n            },\r\n            size: 5,\r\n            isVertical: false\r\n        }\r\n        this.state.ships[1] = {\r\n            id: 'battleship',\r\n            deltaPosition: {\r\n                x: 0, y: 0\r\n            },\r\n            size: 4,\r\n            isVertical: false\r\n        }\r\n        this.state.ships[2] = {\r\n            id: 'cruiser',\r\n            deltaPosition: {\r\n                x: 0, y: 0\r\n            },\r\n            size: 3,\r\n            isVertical: false\r\n        }\r\n        this.state.ships[3] = {\r\n            id: 'submarine',\r\n            deltaPosition: {\r\n                x: 0, y: 0\r\n            },\r\n            size: 3,\r\n            isVertical: false\r\n        }\r\n        this.state.ships[4] = {\r\n            id: 'destroyer',\r\n            deltaPosition: {\r\n                x: 0, y: 0\r\n            },\r\n            size: 2,\r\n            isVertical: false\r\n        }\r\n\r\n\r\n        // this.state.ships[0] = {\r\n        //     id: 'carrier',\r\n        //     deltaPosition: {\r\n        //         x: 0, y: 0\r\n        //     },\r\n        //     size: 4,\r\n        //     drag: true,\r\n        //     isVertical: false\r\n        // }\r\n        // this.state.ships[1] = {\r\n        //     id: 'battleship1',\r\n        //     deltaPosition: {\r\n        //         x: 0, y: 0\r\n        //     },\r\n        //     size: 3,\r\n        //     drag: true,\r\n        //     isVertical: false\r\n        // }\r\n        // this.state.ships[2] = {\r\n        //     id: 'battleship2',\r\n        //     deltaPosition: {\r\n        //         x: 0, y: 0\r\n        //     },\r\n        //     size: 3,\r\n        //     drag: true,\r\n        //     isVertical: false\r\n        // }\r\n        // this.state.ships[3] = {\r\n        //     id: 'battleship3',\r\n        //     deltaPosition: {\r\n        //         x: 0, y: 0\r\n        //     },\r\n        //     size: 3,\r\n        //     drag: true,\r\n        //     isVertical: false\r\n        // }\r\n        // this.state.ships[4] = {\r\n        //     id: 'destroyer1',\r\n        //     deltaPosition: {\r\n        //         x: 0, y: 0\r\n        //     },\r\n        //     size: 2,\r\n        //     drag: true,\r\n        //     isVertical: false\r\n        // }\r\n        // this.state.ships[5] = {\r\n        //     id: 'destroyer2',\r\n        //     deltaPosition: {\r\n        //         x: 0, y: 0\r\n        //     },\r\n        //     size: 2,\r\n        //     drag: true,\r\n        //     isVertical: false\r\n        // }\r\n        // this.state.ships[6] = {\r\n        //     id: 'destroyer3',\r\n        //     deltaPosition: {\r\n        //         x: 0, y: 0\r\n        //     },\r\n        //     size: 2,\r\n        //     drag: true,\r\n        //     isVertical: false\r\n        // }\r\n        // this.state.ships[7] = {\r\n        //     id: 'frigate1',\r\n        //     deltaPosition: {\r\n        //         x: 0, y: 0\r\n        //     },\r\n        //     size: 1,\r\n        //     drag: true,\r\n        //     isVertical: false\r\n        // }\r\n        // this.state.ships[8] = {\r\n        //     id: 'frigate2',\r\n        //     deltaPosition: {\r\n        //         x: 0, y: 0\r\n        //     },\r\n        //     size: 1,\r\n        //     drag: true,\r\n        //     isVertical: false\r\n        // }\r\n\r\n    }\r\n\r\n\r\n    // onControlledDrag = (e, position) => {\r\n    //     const {x, y} = position;\r\n    //     this.setState({controlledPosition: {x, y}});\r\n    // };\r\n    //\r\n    // onControlledDragStop = (e, position) => {\r\n    //     this.onControlledDrag(e, position);\r\n    //     this.onStop();\r\n    // };\r\n\r\n    handleDrag(e, ui) {\r\n\r\n        const shipId = ui.node.id;\r\n\r\n        const auxShipArray = this.state.ships;\r\n\r\n        let auxShip = auxShipArray[shipId];\r\n\r\n\r\n        const {x, y} = auxShip.deltaPosition;\r\n\r\n        auxShip.deltaPosition = {\r\n            x: x + ui.deltaX,\r\n            y: y + ui.deltaY,\r\n        }\r\n\r\n        auxShipArray[shipId] = auxShip;\r\n\r\n        this.setState({\r\n            ships: auxShipArray\r\n        })\r\n\r\n    };\r\n\r\n\r\n    rotateShip(shipId) {\r\n\r\n        const auxShipArray = this.state.ships;\r\n\r\n        let auxShip = auxShipArray[shipId];\r\n\r\n        auxShip.isVertical = !auxShip.isVertical;\r\n\r\n        auxShipArray[shipId] = auxShip;\r\n\r\n        this.setState({\r\n            ships: auxShipArray\r\n        })\r\n\r\n    }\r\n\r\n    renderShip(i) {\r\n        return <Ship\r\n            rotate={(ship) => this.rotateShip(ship)}\r\n            onDrag={(e, ui) => this.handleDrag(e, ui)}\r\n            shipData={this.state.ships[i]}\r\n            dragEnabled={this.state.dragEnabled}\r\n            id={i}\r\n            key={i}\r\n        > </Ship>\r\n    }\r\n\r\n    confirmarPosicionBarcos() {\r\n        const tableroShips = Array(100).fill(0);\r\n\r\n        let shipPositionIsValid = true;\r\n\r\n        for (let i = 0; i < this.state.ships.length; i++) {\r\n            const ship = this.state.ships[i];\r\n            const row = ship.deltaPosition.y / 60;\r\n            const col = ship.deltaPosition.x / 60;\r\n            if (ship.isVertical) {\r\n                shipPositionIsValid = shipPositionIsValid && (this.inRange(row, 0, 10 - ship.size) && this.inRange(col, 0, 9));\r\n                for (let j = 0; j < ship.size; j++) {\r\n                    tableroShips[(row * 10) + (10 * j) + col] += 1;\r\n                }\r\n            } else {\r\n                shipPositionIsValid = shipPositionIsValid && (this.inRange(row, 0, 9) && this.inRange(col, 0, 10 - ship.size));\r\n                for (let j = 0; j < ship.size; j++) {\r\n                    tableroShips[(row * 10) + j + col] += 1;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        shipPositionIsValid = shipPositionIsValid && !(tableroShips.some(posCount => (posCount > 1)));\r\n\r\n\r\n        if (shipPositionIsValid) {\r\n            this.setState({\r\n                dragEnabled: false\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const shipMarkup = [];\r\n\r\n        for (let i = 0; i < this.state.ships.length; i++) {\r\n            shipMarkup.push(this.renderShip(i))\r\n        }\r\n\r\n        const shipBoardMarkup = []\r\n\r\n        for (let i = 0; i < 100; i++) {\r\n            shipBoardMarkup.push(<div key={i} className=\"grid-item\">{i}</div>)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h1>Batalla Naval</h1>\r\n\r\n                <div className='board1Container'>\r\n\r\n                    <div style={{display: \"flex\", columnCount: '2', columnGap: '60px'}}>\r\n                        {shipMarkup}\r\n                        <div className=\"grid-container\">\r\n                            {shipBoardMarkup}\r\n                        </div>\r\n\r\n                        <button style={{width: '100%', height: '60px'}}\r\n                                onClick={() => this.confirmarPosicionBarcos()}>Confirmar Barcos\r\n                        </button>\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                </div>\r\n\r\n\r\n                {/*<Draggable onStart={() => false}>*/}\r\n                {/*    <div className=\"box\">I don't want to be dragged</div>*/}\r\n                {/*</Draggable>*/}\r\n                {/*<Draggable onDrag={this.handleDrag} {...dragHandlers}>*/}\r\n                {/*    <div className=\"box\">*/}\r\n                {/*        <div>I track my deltas</div>*/}\r\n                {/*        <div>x: {deltaPosition.x.toFixed(0)}, y: {deltaPosition.y.toFixed(0)}</div>*/}\r\n                {/*    </div>*/}\r\n                {/*</Draggable>*/}\r\n\r\n\r\n                {/*<Draggable grid={[25, 25]} {...dragHandlers}>*/}\r\n                {/*    <div className=\"box\">I snap to a 25 x 25 grid</div>*/}\r\n                {/*</Draggable>*/}\r\n                {/*<Draggable grid={[50, 50]} {...dragHandlers}>*/}\r\n                {/*    <div className=\"box\">I snap to a 50 x 50 grid</div>*/}\r\n                {/*</Draggable>*/}\r\n\r\n                {/*<Draggable {...dragHandlers}>*/}\r\n                {/*    <div className=\"box drop-target\" onMouseEnter={this.onDropAreaMouseEnter}*/}\r\n                {/*         onMouseLeave={this.onDropAreaMouseLeave}>I can detect drops from the next box.*/}\r\n                {/*    </div>*/}\r\n                {/*</Draggable>*/}\r\n                {/*<Draggable {...dragHandlers} onStop={this.onDrop}>*/}\r\n                {/*    <div className={`box ${this.state.activeDrags ? \"no-pointer-events\" : \"\"}`}>I can be dropped onto*/}\r\n                {/*        another box.*/}\r\n                {/*    </div>*/}\r\n                {/*</Draggable>*/}\r\n\r\n                {/*<Draggable bounds=\"body\" {...dragHandlers}>*/}\r\n                {/*    <div className=\"box\">*/}\r\n                {/*        I can only be moved within the confines of the body element.*/}\r\n                {/*    </div>*/}\r\n                {/*</Draggable>*/}\r\n\r\n                {/*<Draggable position={controlledPosition} {...dragHandlers} onDrag={this.onControlledDrag}>*/}\r\n                {/*    <div className=\"box\">*/}\r\n                {/*        My position can be changed programmatically. <br/>*/}\r\n                {/*        I have a drag handler to sync state.*/}\r\n                {/*        <div>*/}\r\n                {/*            <a href=\"#\" onClick={this.adjustXPos}>Adjust x ({controlledPosition.x})</a>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div>*/}\r\n                {/*            <a href=\"#\" onClick={this.adjustYPos}>Adjust y ({controlledPosition.y})</a>*/}\r\n                {/*        </div>*/}\r\n                {/*    </div>*/}\r\n                {/*</Draggable>*/}\r\n                {/*<Draggable position={controlledPosition} {...dragHandlers} onStop={this.onControlledDragStop}>*/}\r\n                {/*    <div className=\"box\">*/}\r\n                {/*        My position can be changed programmatically. <br/>*/}\r\n                {/*        I have a dragStop handler to sync state.*/}\r\n                {/*        <div>*/}\r\n                {/*            <a href=\"#\" onClick={this.adjustXPos}>Adjust x ({controlledPosition.x})</a>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div>*/}\r\n                {/*            <a href=\"#\" onClick={this.adjustYPos}>Adjust y ({controlledPosition.y})</a>*/}\r\n                {/*        </div>*/}\r\n                {/*    </div>*/}\r\n                {/*</Draggable>*/}\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    //Aux func\r\n    inRange(number, min, max) {\r\n        return (number >= min && number <= max);\r\n    }\r\n}\r\n\r\n//\r\n// class RemWrapper extends React.Component {\r\n//     // PropTypes is not available in this environment, but here they are.\r\n//     // static propTypes = {\r\n//     //   style: PropTypes.shape({\r\n//     //     transform: PropTypes.string.isRequired\r\n//     //   }),\r\n//     //   children: PropTypes.node.isRequired,\r\n//     //   remBaseline: PropTypes.number,\r\n//     // }\r\n//\r\n//     translateTransformToRem(transform, remBaseline = 16) {\r\n//         const convertedValues = transform.replace('translate(', '').replace(')', '')\r\n//             .split(',')\r\n//             .map(px => px.replace('px', ''))\r\n//             .map(px => parseInt(px, 10) / remBaseline)\r\n//             .map(x => `${x}rem`)\r\n//         const [x, y] = convertedValues\r\n//\r\n//         return `translate(${x}, ${y})`\r\n//     }\r\n//\r\n//     render() {\r\n//         const {children, remBaseline = 16, style} = this.props\r\n//         const child = React.Children.only(children)\r\n//\r\n//         const editedStyle = {\r\n//             ...child.props.style,\r\n//             ...style,\r\n//             transform: this.translateTransformToRem(style.transform, remBaseline),\r\n//         }\r\n//\r\n//         return React.cloneElement(child, {\r\n//             ...child.props,\r\n//             ...this.props,\r\n//             style: editedStyle\r\n//         })\r\n//     }\r\n// }\r\n//\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}